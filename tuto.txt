00:00:00  Welcome to the Django Rest Framework
GENERAL TERMS
API = App programming interface (library, website)
JSON = JavaScript Object Notation
Dictionaries = consists of a collection of key-value pairs. (said dict)
*args = allows you to pass a varying number of positional arguments
**kwargs = allows you to pass a varying number of keyword (or named) arguments
Field = model class attribute that maps to a db column
django REST framwork = serializers aand views
QuerySet = a collection of objects from your database (often used with filters)
f-string = use var inside string with {}
00:01:54  Tools we are using

00:04:36  Setup Python Virtual Environment, Install Req, and Start Django
FROM SCRATCH
Create a virtual environment
Activate a virtual environment
Install dependencies
Update requirements for the project (when installing new dependencies)

FOR WORKING ON PROJECT
Activate virtual env
	source venv/bin/activate
Install dependencies
	pip install -r requirements.txt

CONFIGURING INTELLIJ
Why ? Have a valid environment with dependencies for auto complete

Create a new SDK (System Development Kit) in project structure with the python interpreter in venv
Configure the SDK to be used in the project
Wait for indexing

00:11:40  Creating a Python API Client
An endpoint is like an URL
https://httpbin.org/ to try endpoints

Difference between API and web API, for web HTTP is needed
Difference between a web API and a REST API, REST returns JSON
When you send data to an API in JSON you will get JSON back

00:27:01  Run Django Project
(00:04:36 needed)
Run a development server
	python3 manage.py runserver 8000
Better use localhost than 127.0.0.1

00:31:16  Create your first API View
Now we want to send back JSON instead of the HTML default page
Create a new app (provides a logical separation of components)
	python3 manage.py startapp api
/!\ Add it to settings
In views.py create an API endpoint view (create a function based view)

It's possible and recommended to create urls.py in each app
It's needed to import in the primary one

When a view is added and configured the default url turns into a 404

00:37:06  Echo GET Data
configure a new view and look into the body of the request
try except block because can be empty

We see that converting from received to usable is not always easy

00:47:10  Django Model Instance as API Response
Create a django Model and respond on API with instance of the model
Create a new app (he chose to separate based on use not on logic)
https://docs.djangoproject.com/en/5.0/topics/db/models/

create a new class inherit from models.Model

create a db entry
/!\ make a migration let the db know about the changes
	python3 manage.py makemigrations
	python3 manage.py migrate
access the shell
	p3m shell
import the class (from path.file import Class)
	from products.models import Product
create an object
	Product.objects.create(title='Hello World', content='Amazing', price=12.00)

Serialization process
we have a model (db)
we turn it into a python dict (to use it)
we turn it into JSON (to send it)

00:54:45  Django Model Instance to Dictionary
JsonResponse() accept dict, HttpResponse a string
HttpResponse content type by default is text/html
Can be changed with headers, but the inside is still a dict
Turn a dict into a JSON (json.dump) but doesnt work for everything
model_to_dict

01:00:41  Rest Framework View & Response
decorator and Response class from rest
Decorator help with permissions management

01:04:27  Django Rest Framework Model Serializers
@property decorator used to access a method as an attribute
In Django models, the @property decorator is used to create a property that behaves
like a field but is generated dynamically through a method. It's a Python built-in
decorator that allows you to define a method but access it like an attribute,
avoiding the need to call the method with parentheses. This can make your code
cleaner and more readable.

Create a forms and serializers files
They very similar, forms are input for user in the website
From forms.py to models.py
Benefit of serializer: serialize data, clean data, make multiple

01:14:45  Ingest Data with Django Rest Framework Views
Serializer can ingest data and clean them
HTTP Post method,
Only way to create an instance from the serializer is to .save()
Serializer (broad or small), will check the data match requirement of itself


01:27:05  Django Rest Framework Generics RetrieveAPIView
 different than the previous url
class beased view can be intergrated in two manners:
- in urls.py with wiews.SomethingAPIView.as_view()
- in views.py somethingView = SomethingAPIView.as_view()

01:35:54  Django Rest Framework CreateAPIView
add context to a serializer, for example add the sender to the created object

01:41:57  Django Rest Framework ListAPIView & ListCreateAPIView
Combining views is really common (not usefull if need for different endpoints)

01:44:36  Using Function Based Views For Create Retrieve or List
Regroup List Detail and Create as one
We can do all CRUD operation in one single view

01:55:17  UpdateAPIView & DestroyAPIView
Update and Destroy AIP View

02:04:05  Mixins and a Generic API View
function based view vs class based view
we dont write check for http method we create function to handle them
and we can use pre build views (included in mixin)!!


The ProductMixinView class you mentioned is inheriting from generics.GenericAPIView,
which is a base class provided by Django REST Framework that provides the core
functionality for writing API views. By inheriting from generics.GenericAPIView,
your ProductMixinView gains all the functionality required to create a RESTful API
view, such as handling HTTP requests, rendering responses, and so on.

02:16:33  Session Authentication & Permissions
Create superuser:
	python3 backend/manage.py createsuperuser

02:23:21  User & Group Permissions with DjangoModelPermissions
DjangoModelPermissions
staff::rest_api_tuto
we can parameter many perm in admin panel
for users perm:
	permission_classes = [permissions.DjangoModelPermissions]
we need to declare them on every view ?
create a custom model for view, they are already made for post put patch

02:30:55  Custom Permissions
c'est dur la un peu
	permission_classes = [permissions.IsAdminUser, IsStaffEditorPermissions]
perm order is important

02:45:46  Token Authentication
authenticate communication between client and backend
no raw passwords passed in json

02:59:45  Default Django Rest Framework Settings
set defaults value to auth and perm 
we dont import the module we declare a path

03:07:39  Using Mixins for Permissions
03:13:15  ViewSets & Routers
03:25:51  URLs, Reverse, & Serializers
03:33:47  Model Serializer Create & Update Methods
03:41:47  Custom Validation with Serializers
03:53:04  Request User Data & Customize View Queryset
04:08:44  Related Fields & Foreign Key Serializer
04:24:30  Pagination
04:32:36  A Django Based Search for our Product API
04:48:34  Building your Search Engine on Algolia
05:09:54  Agolia Search Client for Django
05:30:22  Unified Design of Serializers & Indices
05:46:48  JSON WEB Token Authentication with simplejwt
06:00:30  Login via JavaScript Client
06:16:23  Handle Request Blocked by CORS via django cors headers
06:23:53  Using JWT with JS Client
06:39:54  Search via REST API & JS Client
06:48:40  Algolia InstantSearch.js
07:00:35  Thank you and next steps tuto.txt
